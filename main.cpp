/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       550F                                                      */
/*    Created:      10/8/2025, 12:54:28 PM                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here
  // brain
brain Brain;
  // define controller
controller Controller = controller();
  // define drivetrain motors/motor groups
    // motors
motor MotorL1 = motor(PORT11, ratio6_1,true); //second parameter dictates motor cartridge, ratio6_1 is blue speed cartridge
motor MotorL2 = motor(PORT12, ratio6_1,true);
motor MotorL3 = motor(PORT13, ratio6_1,true);
motor MotorR1 = motor(PORT9, ratio6_1);
motor MotorR2 = motor(PORT19, ratio6_1);
motor MotorR3 = motor(PORT18, ratio6_1);
    // motor for intake/conveyor
motor MotorIntakeMain = motor(PORT1, ratio18_1);
motor MotorIntakeTop = motor(PORT8, ratio18_1);
    // motor groups
motor_group DrivetrainLeft = motor_group(MotorL1, MotorL2, MotorL3);
motor_group DrivetrainRight = motor_group(MotorR1, MotorR2, MotorR3);
motor_group BothIntakes = motor_group(MotorIntakeMain, MotorIntakeTop);
  // define drivetrain object
drivetrain Drivetrain = drivetrain(DrivetrainLeft, DrivetrainRight, 12.5, 14, 14, inches, 0.75);

//Define cat drawing
void cat() {
    static const char* imageColors[] = {
        "#ffffff", "#d3d3d3", "#f3f3f3", "#d4d4d4", "#dedede", "#727272", "#0d0d0d", "#000000", "#292929", "#fefefe", "#ececec", "#525252", "#060606", "#1c1c1c", "#f9f9f9", "#dcdcdc", "#515151", "#010101", "#b7b7b7", "#949494", "#1d1d1d", "#0b0b0b", "#e8e8e8", "#f5f5f5", "#9e9e9e", "#131313", "#020202", "#4a4a4a", "#cdcdcd", "#030303", "#e7e7e7", "#ededed", "#969696", "#676767", "#1b1b1b", "#494949", "#cbcbcb", "#474747", "#6a6a6a", "#f0f0f0", "#848484", "#151515", "#5e5e5e", "#cecece", "#d7d7d7", "#6b6b6b", "#8e8e8e", "#343434", "#f8f8f8", "#cacaca", "#a2a2a2", "#4d4d4d", "#424242", "#484848", "#454545", "#444444", "#464646", "#434343", "#4b4b4b", "#4e4e4e", "#9b9b9b", "#e3e3e3", "#d9d9d9", "#f2f2f2", "#d2d2d2", "#373737", "#c0c0c0", "#040404", "#0a0a0a", "#cccccc", "#919191", "#999999", "#797979", "#595959", "#2c2c2c", "#141414", "#363636", "#777777", "#bdbdbd", "#5a5a5a", "#3b3b3b", "#1a1a1a", "#1e1e1e", "#b6b6b6", "#cfcfcf", "#232323", "#565656", "#787878", "#313131", "#050505", "#171717", "#878787", "#d6d6d6", "#929292", "#adadad", "#c8c8c8", "#e9e9e9", "#868686", "#090909", "#070707", "#808080", "#838383", "#656565", "#080808", "#252525", "#6f6f6f", "#aeaeae", "#efefef", "#dfdfdf", "#f1f1f1", "#b2b2b2", "#6e6e6e", "#393939", "#202020", "#575757", "#161616", "#717171", "#fcfcfc", "#afafaf", "#111111", "#c4c4c4", "#5d5d5d", "#303030", "#7d7d7d", "#979797", "#fafafa", "#0c0c0c", "#b4b4b4", "#0e0e0e", "#2a2a2a", "#7b7b7b", "#c9c9c9", "#bbbbbb", "#bfbfbf", "#ebebeb", "#7e7e7e", "#9a9a9a", "#bebebe", "#fdfdfd", "#a6a6a6", "#9c9c9c", "#101010", "#323232", "#e6e6e6", "#2f2f2f", "#7c7c7c", "#e5e5e5", "#606060", "#3c3c3c", "#6c6c6c", "#3d3d3d", "#989898", "#5f5f5f", "#c7c7c7", "#939393", "#e4e4e4", "#d1d1d1", "#c2c2c2", "#e1e1e1", "#222222", "#d0d0d0", "#818181", "#616161", "#c3c3c3", "#898989", "#242424", "#747474", "#2b2b2b", "#8f8f8f", "#696969", "#2d2d2d", "#9d9d9d", "#8c8c8c", "#b1b1b1", "#636363", "#212121", "#fbfbfb", "#767676", "#828282", "#6d6d6d", "#333333", "#121212", "#9f9f9f", "#757575", "#b5b5b5", "#282828", "#707070", "#bcbcbc", "#a9a9a9", "#dadada", "#545454", "#1f1f1f", "#8d8d8d", "#2e2e2e", "#a7a7a7", "#f7f7f7", "#e0e0e0", "#4f4f4f", "#262626", "#858585", "#888888", "#505050", "#a5a5a5", "#666666", "#626262", "#191919", "#5b5b5b", "#3a3a3a", "#dbdbdb", "#585858", "#272727", "#181818", "#555555", "#0f0f0f", "#c5c5c5", "#909090", "#ababab", "#8a8a8a", "#8b8b8b", "#acacac", "#a1a1a1", "#414141", "#b9b9b9", "#4c4c4c", "#535353", "#959595", "#c6c6c6", "#7f7f7f", "#646464", "#7a7a7a", "#5c5c5c", "#3e3e3e", "#b3b3b3", "#dddddd", "#383838", "#d8d8d8", "#404040", "#f6f6f6", "#686868", "#e2e2e2", "#353535", "#737373", "#a3a3a3", "#d5d5d5", "#3f3f3f", "#c1c1c1", "#a0a0a0", "#a8a8a8", "#b0b0b0", "#aaaaaa", "#eeeeee", 
    };

    static const int imageIndices[] = {
        0, 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 7, 13, 14, 0, 15, 16, 17, 7, 18, 0, 9, 19, 8, 7, 20, 21, 7, 22, 0, 23, 24, 25, 7, 26, 27, 28, 4, 29, 7, 30, 0, 31, 32, 33, 34, 7, 35, 36, 0, 14, 37, 7, 38, 0, 39, 40, 6, 7, 41, 42, 43, 0, 18, 7, 44, 0, 2, 45, 6, 7, 13, 46, 14, 0, 47, 7, 47, 0, 48, 49, 50, 5, 51, 35, 52, 53, 54, 55, 56, 57, 53, 54, 37, 57, 27, 55, 56, 53, 52, 37, 57, 37, 56, 57, 35, 57, 53, 54, 37, 57, 37, 54, 58, 57, 37, 57, 37, 56, 57, 37, 59, 60, 61, 62, 63, 64, 9, 0, 24, 65, 29, 7, 25, 24, 23, 0, 66, 67, 7, 68, 63, 0, 61, 69, 70, 71, 72, 73, 74, 6, 29, 7, 12, 75, 76, 77, 78, 9, 0, 23, 50, 79, 27, 80, 81, 7, 82, 83, 84, 9, 0, 85, 7, 86, 0, 30, 36, 87, 88, 68, 7, 89, 90, 47, 56, 57, 27, 54, 56, 53, 35, 91, 92, 0, 23, 62, 61, 93, 80, 89, 7, 17, 80, 94, 0, 46, 7, 89, 95, 0, 96, 97, 76, 98, 7, 17, 7, 11, 0, 83, 68, 7, 99, 51, 78, 0, 14, 85, 7, 100, 0, 44, 101, 102, 103, 7, 17, 68, 104, 35, 105, 106, 28, 23, 1, 31, 61, 62, 63, 64, 107, 108, 15, 109, 1, 2, 62, 61, 31, 1, 2, 3, 30, 3, 23, 64, 107, 108, 15, 109, 1, 109, 15, 108, 39, 1, 2, 3, 30, 3, 2, 110, 111, 56, 55, 56, 112, 113, 98, 7, 17, 30, 0, 114, 7, 67, 115, 116, 117, 0, 118, 7, 119, 9, 0, 9, 120, 121, 81, 7, 6, 122, 42, 123, 71, 124, 84, 31, 0, 92, 91, 80, 13, 103, 7, 90, 9, 0, 91, 7, 98, 58, 24, 63, 64, 117, 0, 125, 126, 7, 73, 0, 125, 127, 51, 128, 7, 103, 129, 79, 130, 131, 0, 62, 63, 64, 63, 15, 108, 107, 132, 87, 79, 133, 0, 134, 135, 56, 54, 111, 110, 117, 0, 101, 7, 6, 63, 0, 50, 81, 115, 121, 131, 0, 2, 136, 80, 103, 7, 122, 137, 138, 0, 9, 25, 7, 139, 0, 6, 7, 41, 19, 0, 61, 35, 67, 7, 17, 104, 38, 69, 15, 0, 140, 7, 141, 23, 0, 63, 26, 7, 142, 46, 39, 0, 143, 72, 47, 21, 7, 67, 144, 145, 146, 0, 147, 7, 71, 0, 112, 7, 67, 148, 94, 0, 2, 149, 68, 7, 99, 150, 151, 39, 0, 9, 128, 7, 22, 0, 23, 57, 7, 12, 82, 152, 66, 64, 31, 61, 0, 93, 12, 7, 89, 52, 106, 48, 0, 153, 7, 12, 154, 4, 0, 155, 37, 7, 68, 122, 130, 156, 61, 0, 134, 135, 13, 7, 98, 47, 157, 0, 109, 7, 98, 122, 130, 158, 0, 109, 20, 7, 67, 51, 128, 7, 98, 159, 80, 53, 86, 77, 18, 160, 109, 15, 0, 161, 21, 7, 26, 80, 18, 0, 63, 89, 7, 113, 162, 131, 0, 163, 67, 7, 141, 4, 164, 112, 20, 17, 7, 103, 25, 21, 25, 128, 25, 119, 126, 25, 68, 7, 165, 133, 0, 164, 115, 67, 7, 25, 166, 23, 0, 50, 7, 167, 61, 0, 146, 168, 169, 37, 53, 122, 6, 7, 115, 72, 155, 0, 117, 83, 166, 170, 126, 7, 98, 171, 0, 9, 172, 7, 52, 134, 0, 131, 123, 162, 122, 141, 67, 7, 67, 173, 0, 131, 174, 175, 17, 7, 122, 120, 9, 0, 176, 177, 7, 178, 0, 117, 64, 107, 84, 151, 179, 35, 37, 180, 41, 25, 21, 25, 128, 25, 119, 126, 25, 126, 181, 159, 182, 0, 158, 183, 129, 7, 182, 0, 9, 57, 7, 17, 83, 0, 184, 185, 7, 17, 32, 0, 76, 7, 25, 156, 0, 143, 5, 29, 7, 186, 0, 14, 68, 7, 58, 117, 0, 108, 103, 7, 67, 187, 0, 139, 7, 161, 0, 78, 82, 7, 81, 48, 0, 162, 7, 17, 188, 0, 189, 68, 7, 190, 0, 9, 159, 7, 191, 96, 0, 192, 7, 68, 2, 0, 10, 128, 7, 86, 117, 0, 193, 7, 154, 0, 101, 7, 116, 0, 194, 7, 67, 63, 0, 176, 20, 7, 60, 0, 195, 20, 7, 116, 0, 155, 114, 7, 65, 0, 118, 7, 165, 0, 23, 57, 7, 33, 0, 81, 7, 153, 0, 96, 180, 7, 21, 16, 166, 196, 0, 30, 3, 48, 0, 73, 7, 197, 0, 48, 181, 7, 55, 138, 0, 158, 53, 17, 7, 98, 157, 0, 189, 7, 82, 0, 189, 128, 7, 58, 0, 9, 110, 26, 7, 98, 63, 0, 198, 7, 26, 15, 0, 199, 26, 7, 174, 23, 0, 138, 177, 7, 103, 163, 0, 149, 7, 111, 0, 11, 7, 200, 138, 0, 168, 7, 147, 0, 153, 7, 198, 0, 5, 7, 99, 32, 176, 0, 144, 7, 17, 7, 201, 0, 9, 98, 7, 202, 0, 138, 164, 7, 104, 120, 0, 88, 7, 17, 89, 7, 74, 0, 203, 7, 11, 0, 96, 204, 7, 88, 155, 0, 181, 7, 205, 7, 206, 0, 63, 26, 7, 104, 0, 166, 7, 205, 156, 0, 207, 7, 90, 7, 116, 0, 25, 7, 67, 30, 0, 160, 26, 7, 141, 22, 0, 152, 7, 46, 0, 8, 7, 12, 9, 0, 149, 7, 198, 138, 0, 69, 90, 7, 84, 0, 181, 7, 153, 0, 125, 128, 7, 208, 0, 156, 148, 17, 7, 99, 60, 0, 113, 7, 17, 30, 0, 93, 7, 193, 0, 78, 209, 37, 57, 37, 73, 133, 0, 122, 7, 67, 9, 0, 121, 7, 168, 0, 188, 210, 119, 126, 25, 21, 181, 211, 76, 203, 40, 60, 171, 39, 0, 191, 7, 44, 0, 112, 7, 17, 39, 0, 210, 7, 89, 150, 173, 0, 122, 7, 67, 9, 0, 198, 7, 26, 30, 0, 78, 212, 8, 6, 25, 213, 141, 47, 137, 0, 210, 7, 20, 78, 138, 0, 213, 7, 133, 0, 8, 7, 26, 138, 0, 125, 6, 7, 21, 94, 0, 188, 210, 119, 126, 25, 21, 181, 99, 7, 168, 0, 22, 7, 113, 0, 213, 7, 153, 0, 139, 7, 198, 0, 62, 214, 215, 60, 51, 6, 7, 85, 0, 208, 7, 57, 0, 63, 26, 7, 210, 0, 124, 7, 133, 0, 107, 59, 25, 121, 14, 0, 39, 105, 7, 75, 9, 0, 171, 7, 37, 0, 15, 7, 86, 0, 216, 7, 204, 0, 182, 7, 8, 69, 0, 55, 7, 85, 9, 0, 168, 7, 124, 0, 217, 7, 5, 0, 199, 7, 77, 0, 182, 7, 25, 137, 0, 188, 7, 218, 0, 211, 7, 32, 0, 121, 7, 110, 0, 106, 7, 37, 0, 107, 27, 7, 13, 1, 0, 138, 104, 7, 102, 0, 63, 29, 7, 103, 9, 0, 41, 7, 219, 0, 84, 7, 26, 160, 0, 199, 17, 7, 13, 156, 0, 220, 7, 213, 9, 0, 125, 26, 7, 112, 0, 63, 98, 7, 115, 0, 221, 7, 40, 0, 97, 7, 180, 0, 44, 7, 51, 0, 94, 7, 57, 0, 109, 26, 7, 55, 0, 9, 88, 7, 89, 211, 212, 222, 117, 0, 135, 7, 172, 0, 125, 25, 7, 21, 22, 0, 195, 114, 213, 41, 6, 141, 181, 21, 25, 126, 119, 126, 75, 126, 25, 213, 25, 126, 25, 128, 213, 75, 21, 25, 126, 181, 119, 126, 25, 126, 181, 213, 25, 21, 25, 213, 25, 21, 25, 128, 25, 119, 126, 25, 126, 25, 141, 6, 25, 126, 41, 213, 25, 126, 25, 6, 119, 25, 126, 25, 6, 75, 141, 6, 25, 21, 25, 141, 128, 25, 126, 41, 6, 126, 7, 99, 170, 56, 57, 35, 223, 105, 70, 140, 70, 69, 15, 108, 107, 64, 117, 0, 133, 7, 224, 0, 225, 74, 159, 182, 0, 149, 7, 81, 195, 91, 7, 28, 0, 118, 7, 67, 6, 25, 81, 65, 37, 58, 5, 19, 215, 132, 160, 107, 108, 0, 226, 7, 42, 0, 82, 7, 72, 68, 7, 227, 0, 118, 7, 98, 25, 6, 8, 52, 54, 228, 100, 214, 62, 61, 31, 0, 97, 7, 150, 0, 174, 7, 41, 2, 0, 195, 114, 213, 41, 6, 141, 181, 21, 25, 126, 119, 126, 75, 126, 25, 213, 25, 126, 25, 128, 213, 75, 21, 25, 126, 181, 119, 126, 25, 126, 181, 119, 213, 25, 21, 25, 213, 25, 21, 25, 128, 25, 119, 126, 25, 126, 25, 141, 6, 25, 126, 41, 213, 25, 126, 25, 6, 119, 25, 126, 25, 6, 75, 141, 6, 25, 21, 25, 141, 128, 25, 126, 41, 21, 7, 26, 98, 7, 17, 68, 104, 35, 116, 194, 36, 2, 1, 0, 157, 7, 183, 0, 2, 15, 108, 84, 93, 24, 229, 230, 56, 231, 104, 6, 181, 141, 128, 231, 156, 0, 63, 75, 7, 17, 188, 0, 22, 21, 7, 149, 0, 30, 3, 23, 28, 232, 70, 140, 178, 203, 54, 56, 53, 148, 159, 128, 181, 99, 7, 12, 211, 76, 102, 91, 84, 108, 0, 163, 7, 166, 0, 3, 2, 28, 106, 19, 172, 169, 53, 142, 75, 25, 68, 26, 7, 33, 0, 48, 213, 7, 57, 0, 149, 7, 44, 0, 3, 2, 28, 106, 19, 172, 38, 53, 142, 25, 98, 26, 7, 98, 175, 52, 46, 233, 0, 106, 7, 149, 0, 15, 109, 160, 18, 70, 105, 58, 56, 234, 34, 99, 7, 33, 0, 22, 128, 7, 231, 235, 0, 61, 54, 7, 136, 0, 2, 15, 108, 84, 91, 203, 56, 54, 170, 126, 29, 7, 98, 175, 236, 179, 71, 84, 39, 0, 163, 7, 87, 0, 3, 2, 28, 106, 166, 16, 56, 112, 113, 98, 7, 29, 68, 181, 141, 128, 231, 156, 0, 30, 190, 198, 203, 237, 0, 134, 52, 7, 90, 176, 0, 48, 36, 194, 5, 59, 37, 234, 82, 103, 7, 17, 68, 8, 201, 183, 232, 43, 117, 0, 124, 7, 58, 0, 23, 43, 50, 71, 97, 238, 234, 81, 99, 7, 98, 25, 6, 8, 52, 54, 228, 227, 24, 225, 84, 30, 3, 48, 0, 133, 7, 37, 0, 156, 180, 7, 103, 83, 0, 62, 226, 161, 228, 142, 119, 89, 7, 103, 35, 166, 127, 125, 0, 239, 7, 240, 0, 117, 64, 107, 84, 136, 140, 161, 203, 56, 55, 129, 126, 29, 7, 98, 34, 65, 37, 223, 5, 19, 168, 187, 160, 107, 108, 0, 48, 3, 0, 185, 7, 192, 0, 138, 124, 27, 37, 54, 58, 57, 37, 57, 37, 56, 57, 37, 58, 179, 97, 43, 63, 64, 9, 0, 184, 181, 7, 207, 23, 0, 138, 222, 241, 142, 181, 89, 7, 103, 104, 197, 183, 127, 125, 0, 14, 98, 7, 28, 156, 217, 238, 207, 81, 181, 21, 67, 7, 12, 75, 180, 37, 35, 179, 46, 70, 232, 28, 63, 62, 0, 9, 160, 132, 42, 191, 181, 68, 29, 7, 88, 9, 0, 184, 29, 7, 29, 38, 23, 0, 133, 7, 12, 141, 113, 112, 56, 55, 56, 53, 56, 169, 164, 32, 151, 70, 71, 168, 60, 70, 18, 160, 109, 15, 108, 39, 1, 125, 0, 196, 166, 223, 17, 7, 236, 0, 138, 160, 18, 183, 190, 210, 21, 26, 7, 103, 8, 86, 133, 0, 9, 160, 132, 183, 212, 68, 7, 99, 81, 76, 37, 223, 5, 50, 43, 63, 64, 9, 0, 108, 84, 97, 102, 76, 90, 89, 7, 153, 0, 242, 99, 7, 12, 149, 96, 0, 33, 7, 67, 21, 181, 119, 6, 165, 148, 53, 73, 87, 71, 215, 182, 136, 84, 107, 64, 117, 0, 33, 7, 45, 0, 2, 84, 140, 105, 76, 67, 7, 26, 231, 156, 0, 15, 69, 40, 203, 47, 41, 12, 7, 26, 68, 198, 223, 166, 71, 46, 163, 3, 0, 108, 84, 183, 193, 68, 7, 89, 63, 0, 219, 7, 68, 165, 7, 103, 135, 134, 0, 22, 211, 7, 67, 141, 122, 53, 56, 126, 7, 17, 200, 0, 2, 84, 151, 221, 126, 26, 7, 33, 0, 39, 84, 124, 179, 236, 175, 99, 7, 99, 119, 6, 198, 150, 53, 114, 77, 140, 70, 28, 15, 108, 39, 0, 2, 69, 71, 179, 236, 175, 98, 7, 29, 119, 126, 198, 51, 118, 0, 23, 139, 52, 7, 26, 188, 243, 207, 7, 68, 37, 94, 69, 117, 0, 138, 1, 109, 15, 108, 39, 1, 2, 3, 30, 3, 2, 133, 180, 7, 81, 113, 141, 12, 7, 12, 211, 240, 27, 57, 37, 224, 183, 60, 215, 214, 62, 61, 31, 1, 125, 0, 2, 84, 151, 150, 126, 17, 7, 33, 0, 31, 32, 33, 88, 29, 7, 17, 26, 7, 170, 145, 163, 3, 0, 117, 43, 232, 183, 201, 8, 21, 26, 7, 103, 20, 80, 38, 93, 96, 0, 94, 148, 67, 7, 99, 226, 0, 184, 180, 7, 103, 59, 202, 39, 0, 202, 7, 56, 0, 9, 64, 63, 62, 61, 31, 64, 66, 168, 32, 151, 70, 71, 168, 60, 70, 168, 179, 35, 37, 54, 58, 150, 165, 6, 181, 119, 21, 67, 7, 67, 21, 119, 34, 234, 56, 58, 105, 70, 18, 160, 109, 15, 0, 2, 149, 90, 231, 156, 0, 108, 49, 241, 122, 29, 7, 98, 113, 244, 38, 154, 36, 39, 118, 7, 68, 63, 0, 117, 43, 232, 190, 41, 67, 7, 213, 142, 41, 7, 128, 24, 48, 0, 15, 179, 198, 7, 67, 31, 0, 138, 78, 191, 7, 26, 88, 179, 71, 69, 2, 0, 172, 7, 145, 0, 125, 1, 31, 84, 124, 71, 215, 182, 177, 86, 37, 80, 159, 68, 7, 103, 25, 126, 198, 223, 166, 71, 168, 163, 3, 0, 66, 130, 175, 7, 89, 181, 88, 203, 101, 28, 15, 0, 14, 115, 7, 102, 0, 62, 214, 135, 42, 122, 213, 67, 7, 89, 181, 142, 228, 161, 43, 0, 33, 7, 112, 60, 171, 84, 109, 1, 109, 15, 108, 107, 160, 187, 87, 51, 7, 29, 73, 158, 0, 222, 52, 89, 7, 26, 21, 8, 201, 183, 232, 43, 117, 0, 62, 245, 123, 162, 122, 6, 7, 111, 0, 61, 31, 64, 66, 168, 32, 5, 59, 37, 234, 82, 103, 7, 99, 81, 234, 238, 217, 156, 61, 0, 125, 94, 102, 213, 7, 6, 11, 77, 18, 160, 138, 0, 219, 7, 90, 96, 0, 62, 245, 135, 162, 211, 7, 26, 21, 8, 16, 241, 18, 160, 138, 0, 196, 224, 7, 89, 57, 24, 39, 0, 2, 50, 149, 240, 29, 7, 67, 126, 119, 25, 126, 25, 6, 75, 103, 7, 141, 22, 0, 62, 2, 1, 109, 84, 171, 60, 40, 203, 56, 53, 150, 165, 6, 141, 103, 7, 98, 159, 57, 149, 50, 43, 23, 0, 18, 37, 99, 7, 25, 212, 18, 84, 9, 0, 104, 7, 177, 0, 62, 245, 238, 185, 103, 7, 89, 113, 221, 105, 140, 84, 2, 0, 176, 124, 90, 7, 90, 130, 48, 0, 2, 188, 190, 21, 7, 67, 39, 0, 62, 63, 28, 232, 70, 168, 179, 35, 37, 180, 41, 25, 68, 29, 7, 89, 112, 149, 50, 2, 0, 15, 241, 170, 17, 7, 90, 204, 161, 44, 0, 200, 7, 29, 22, 0, 160, 101, 80, 20, 103, 7, 68, 159, 57, 105, 171, 39, 0, 2, 72, 7, 26, 16, 43, 61, 31, 0, 69, 112, 81, 164, 0, 138, 160, 18, 241, 16, 8, 21, 26, 7, 68, 122, 130, 158, 0, 23, 43, 50, 71, 97, 238, 234, 81, 99, 7, 67, 175, 57, 186, 50, 2, 0, 125, 218, 165, 7, 8, 40, 160, 0, 165, 7, 174, 0, 62, 214, 38, 210, 103, 7, 198, 203, 91, 69, 61, 0, 43, 215, 60, 166, 190, 37, 57, 37, 54, 56, 53, 37, 169, 93, 84, 31, 0, 186, 17, 29, 192, 0, 190, 7, 12, 63, 0, 2, 84, 171, 105, 57, 159, 128, 119, 25, 126, 25, 6, 75, 211, 234, 174, 91, 156, 61, 0, 3, 163, 145, 162, 122, 213, 67, 7, 89, 175, 57, 5, 50, 2, 0, 2, 242, 35, 99, 7, 67, 80, 124, 30, 0, 18, 7, 84, 0, 62, 214, 38, 210, 103, 7, 17, 41, 76, 174, 91, 156, 61, 0, 125, 6, 7, 119, 196, 0, 63, 17, 7, 67, 63, 0, 117, 69, 94, 166, 37, 98, 7, 89, 165, 37, 60, 61, 0, 158, 162, 89, 7, 25, 87, 23, 0, 176, 129, 7, 99, 14, 0, 43, 100, 228, 90, 7, 12, 90, 76, 174, 91, 158, 0, 76, 7, 221, 2, 0, 102, 7, 180, 0, 117, 69, 94, 197, 119, 29, 7, 98, 165, 37, 124, 30, 0, 9, 232, 203, 17, 7, 13, 162, 43, 0, 160, 67, 7, 90, 213, 7, 41, 76, 145, 157, 0, 246, 7, 129, 96, 0, 64, 6, 7, 18, 0, 125, 28, 106, 51, 119, 29, 7, 98, 47, 178, 146, 0, 23, 24, 25, 7, 29, 65, 202, 0, 138, 160, 18, 212, 6, 7, 115, 76, 203, 91, 15, 0, 162, 7, 6, 64, 0, 2, 210, 7, 167, 0, 125, 28, 106, 27, 141, 67, 7, 26, 211, 234, 101, 160, 0, 14, 46, 13, 7, 236, 242, 2, 0, 138, 160, 18, 177, 197, 68, 7, 175, 203, 97, 15, 0, 224, 7, 136, 138, 0, 31, 167, 7, 242, 0, 125, 173, 111, 167, 6, 67, 7, 90, 241, 18, 138, 0, 125, 101, 205, 7, 236, 131, 0, 138, 160, 18, 73, 205, 67, 7, 67, 174, 84, 108, 0, 48, 33, 7, 161, 0, 82, 7, 135, 0, 125, 106, 33, 170, 21, 7, 68, 212, 226, 0, 39, 100, 68, 7, 13, 40, 233, 0, 138, 187, 87, 142, 181, 89, 7, 67, 159, 25, 7, 151, 125, 0, 138, 246, 7, 185, 169, 172, 19, 71, 46, 136, 82, 7, 121, 0, 9, 120, 147, 159, 89, 7, 26, 47, 227, 146, 0, 23, 164, 181, 7, 25, 24, 23, 0, 138, 137, 114, 211, 67, 7, 29, 88, 179, 124, 31, 0, 23, 59, 7, 185, 24, 39, 0, 92, 128, 7, 230, 48, 0, 157, 145, 175, 7, 17, 167, 179, 44, 0, 226, 150, 7, 198, 124, 9, 0, 48, 49, 220, 244, 68, 7, 67, 191, 231, 179, 124, 84, 39, 0, 125, 124, 7, 67, 121, 15, 0, 96, 129, 7, 86, 117, 0, 233, 46, 193, 26, 7, 224, 247, 125, 0, 49, 55, 29, 7, 198, 202, 0, 30, 124, 244, 12, 7, 103, 159, 236, 179, 151, 31, 0, 44, 113, 7, 17, 30, 0, 1, 162, 126, 7, 67, 87, 96, 0, 39, 174, 6, 7, 68, 123, 31, 0, 131, 234, 7, 90, 248, 125, 0, 146, 199, 234, 103, 7, 26, 82, 150, 215, 235, 0, 39, 186, 12, 7, 124, 0, 9, 160, 187, 168, 19, 71, 46, 136, 225, 146, 0, 9, 120, 73, 41, 7, 126, 135, 134, 0, 2, 166, 7, 29, 100, 0, 64, 200, 80, 34, 17, 7, 99, 207, 218, 96, 0, 23, 202, 54, 7, 17, 22, 0, 44, 16, 26, 7, 227, 0, 138, 124, 90, 7, 12, 73, 107, 0, 44, 179, 167, 99, 7, 103, 52, 105, 106, 48, 0, 43, 154, 15, 0, 31, 19, 74, 7, 210, 0, 4, 79, 7, 26, 111, 4, 0, 117, 222, 212, 25, 7, 68, 129, 33, 106, 125, 0, 117, 222, 210, 7, 68, 83, 0, 118, 20, 7, 80, 158, 0, 23, 139, 150, 98, 7, 89, 20, 121, 120, 9, 0, 62, 23, 0, 39, 87, 17, 7, 126, 24, 48, 0, 31, 84, 97, 76, 89, 7, 119, 142, 123, 133, 9, 0, 1, 207, 7, 201, 138, 0, 192, 29, 7, 29, 144, 241, 44, 0, 94, 41, 7, 99, 249, 0, 210, 7, 12, 112, 192, 31, 0, 250, 87, 7, 8, 195, 0, 197, 7, 21, 54, 194, 23, 0, 91, 7, 169, 0, 189, 111, 79, 72, 137, 138, 0, 65, 7, 12, 248, 0, 163, 126, 7, 8, 195, 0, 48, 3, 0, 
    };

    static const int imageCounts[] = {
        24808, 1, 1, 1, 474, 1, 1, 1, 3, 1, 1, 470, 1, 1, 1, 6, 1, 1, 467, 1, 1, 1, 9, 1, 464, 1, 1, 1, 7, 1, 1, 3, 1, 462, 1, 1, 1, 6, 1, 1, 1, 1, 1, 3, 1, 459, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 3, 1, 458, 1, 1, 1, 7, 1, 1, 1, 3, 1, 4, 1, 456, 1, 1, 1, 7, 1, 1, 1, 5, 1, 3, 1, 369, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 34, 1, 1, 1, 7, 1, 1, 1, 6, 1, 1, 2, 1, 1, 361, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 8, 1, 3, 1, 357, 1, 1, 1, 1, 1, 64, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 11, 1, 3, 1, 1, 353, 1, 1, 1, 1, 30, 1, 50, 1, 5, 1, 1, 12, 1, 1, 1, 12, 1, 1, 3, 1, 351, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 4, 1, 10, 1, 1, 1, 1, 14, 1, 3, 1, 1, 347, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 54, 1, 1, 1, 1, 1, 10, 1, 1, 4, 1, 5, 1, 1, 1, 1, 1, 1, 16, 1, 1, 3, 1, 345, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 67, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 21, 1, 3, 1, 1, 286, 1, 1, 1, 1, 1, 51, 1, 1, 1, 1, 10, 1, 1, 1, 114, 1, 1, 3, 1, 287, 1, 4, 1, 1, 47, 1, 1, 1, 8, 1, 1, 1, 1, 1, 117, 1, 3, 1, 1, 286, 1, 1, 6, 1, 1, 1, 41, 1, 1, 1, 1, 7, 1, 1, 1, 1, 121, 1, 3, 1, 288, 1, 8, 1, 1, 1, 37, 1, 1, 1, 7, 1, 1, 1, 1, 123, 1, 1, 3, 1, 288, 1, 1, 10, 1, 1, 1, 1, 1, 1, 1, 29, 1, 1, 6, 1, 1, 1, 1, 126, 1, 3, 1, 1, 1, 288, 1, 1, 16, 1, 1, 1, 1, 1, 21, 1, 1, 1, 6, 1, 1, 1, 129, 1, 6, 1, 1, 1, 1, 285, 1, 1, 3, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 5, 1, 1, 1, 132, 1, 1, 9, 1, 1, 1, 283, 1, 1, 3, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 135, 1, 1, 1, 10, 1, 1, 1, 281, 1, 4, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 28, 1, 1, 1, 138, 1, 1, 1, 1, 1, 8, 1, 1, 280, 1, 1, 4, 1, 1, 8, 1, 1, 1, 1, 1, 1, 20, 1, 1, 146, 1, 1, 1, 1, 6, 1, 1, 1, 278, 1, 1, 4, 1, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 150, 1, 1, 1, 6, 1, 279, 1, 1, 3, 1, 1, 187, 1, 1, 4, 1, 1, 280, 1, 3, 1, 1, 187, 1, 1, 1, 4, 1, 279, 1, 1, 3, 1, 1, 188, 1, 1, 3, 1, 1, 279, 1, 4, 1, 189, 1, 1, 3, 1, 1, 279, 1, 3, 1, 1, 189, 1, 1, 3, 1, 279, 1, 1, 3, 1, 1, 189, 1, 3, 1, 1, 279, 1, 1, 3, 1, 1, 189, 1, 3, 1, 280, 1, 4, 1, 189, 1, 3, 1, 1, 279, 1, 1, 4, 1, 188, 1, 1, 3, 1, 278, 1, 1, 5, 1, 189, 1, 3, 1, 277, 1, 1, 6, 1, 190, 1, 3, 1, 275, 1, 1, 4, 1, 1, 1, 1, 159, 2, 1, 1, 27, 1, 3, 1, 274, 1, 1, 4, 1, 1, 160, 1, 1, 1, 2, 1, 1, 26, 1, 3, 1, 273, 1, 1, 4, 1, 160, 1, 1, 1, 5, 1, 1, 26, 1, 2, 1, 1, 271, 1, 1, 4, 1, 1, 159, 1, 1, 8, 1, 1, 25, 1, 3, 1, 270, 1, 5, 1, 1, 160, 1, 10, 1, 25, 1, 3, 1, 269, 1, 4, 1, 1, 1, 161, 1, 3, 1, 6, 1, 25, 1, 1, 3, 1, 266, 1, 1, 4, 1, 1, 163, 1, 2, 1, 1, 6, 1, 26, 1, 3, 1, 265, 1, 1, 4, 1, 1, 164, 1, 6, 1, 3, 1, 26, 1, 1, 2, 1, 265, 1, 4, 1, 1, 165, 1, 6, 1, 3, 1, 27, 1, 2, 1, 1, 263, 1, 1, 3, 1, 1, 166, 1, 10, 1, 27, 1, 2, 1, 1, 263, 1, 3, 1, 1, 167, 1, 1, 9, 1, 27, 1, 3, 1, 262, 1, 1, 3, 1, 169, 1, 1, 1, 5, 1, 1, 28, 1, 2, 1, 1, 262, 1, 3, 1, 172, 1, 1, 1, 1, 1, 1, 1, 29, 1, 2, 1, 1, 262, 1, 3, 1, 89, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 105, 1, 3, 1, 262, 1, 2, 1, 1, 89, 1, 12, 1, 1, 1, 103, 1, 2, 1, 1, 262, 1, 2, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 57, 1, 15, 1, 1, 1, 100, 1, 3, 1, 262, 1, 2, 1, 1, 22, 1, 1, 7, 1, 1, 56, 1, 1, 1, 1, 1, 1, 1, 1, 10, 1, 99, 1, 3, 1, 263, 1, 3, 1, 22, 1, 9, 1, 64, 1, 1, 1, 1, 1, 1, 4, 1, 99, 1, 3, 1, 262, 1, 1, 2, 1, 23, 1, 10, 1, 54, 1, 1, 1, 1, 1, 9, 1, 1, 3, 1, 1, 98, 1, 3, 1, 262, 1, 3, 1, 23, 1, 10, 1, 54, 1, 3, 1, 1, 9, 1, 3, 1, 1, 98, 1, 3, 1, 262, 1, 3, 1, 23, 1, 10, 1, 54, 1, 4, 1, 1, 7, 1, 4, 1, 99, 1, 3, 1, 262, 1, 3, 1, 23, 1, 10, 1, 54, 1, 1, 4, 1, 1, 5, 1, 1, 3, 1, 99, 1, 1, 2, 1, 1, 262, 1, 3, 1, 23, 1, 9, 1, 1, 56, 1, 1, 3, 1, 1, 4, 1, 3, 1, 1, 99, 1, 1, 2, 1, 262, 1, 1, 2, 1, 25, 1, 8, 1, 58, 1, 4, 1, 3, 1, 4, 1, 100, 1, 3, 1, 262, 1, 1, 2, 1, 25, 1, 1, 3, 1, 1, 1, 1, 1, 59, 1, 4, 1, 1, 1, 1, 3, 1, 1, 22, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 246, 1, 3, 1, 27, 1, 1, 1, 1, 64, 1, 3, 1, 1, 1, 4, 1, 23, 1, 97, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 233, 1, 3, 1, 96, 1, 3, 1, 1, 3, 1, 24, 1, 111, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 221, 1, 3, 1, 96, 1, 7, 1, 1, 24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 40, 1, 1, 1, 1, 1, 1, 1, 1, 1, 213, 1, 3, 1, 64, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 5, 1, 1, 101, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 1, 1, 1, 1, 1, 1, 1, 206, 1, 3, 1, 51, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 15, 1, 16, 1, 1, 4, 1, 102, 1, 4, 1, 20, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 23, 1, 1, 1, 1, 1, 201, 1, 3, 1, 39, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 29, 1, 17, 1, 1, 2, 1, 1, 100, 1, 1, 4, 1, 34, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 194, 1, 3, 1, 29, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 99, 1, 1, 4, 1, 1, 44, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 187, 1, 3, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 1, 3, 1, 98, 1, 1, 4, 1, 1, 54, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 183, 1, 3, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 17, 1, 4, 1, 24, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 51, 1, 1, 4, 1, 1, 61, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 178, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 4, 1, 1, 1, 22, 1, 19, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 4, 1, 68, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 171, 1, 1, 1, 1, 1, 1, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 29, 1, 1, 1, 1, 1, 1, 1, 9, 1, 13, 1, 1, 7, 1, 1, 1, 20, 1, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 6, 1, 76, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 163, 1, 1, 1, 1, 1, 1, 1, 26, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 1, 1, 1, 1, 1, 15, 1, 1, 12, 1, 4, 1, 1, 5, 1, 1, 1, 18, 1, 1, 62, 1, 1, 1, 1, 1, 1, 4, 1, 1, 82, 1, 1, 1, 1, 1, 1, 8, 1, 156, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 36, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 4, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 2, 1, 52, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 71, 1, 1, 1, 1, 1, 1, 3, 1, 152, 1, 1, 1, 1, 1, 17, 1, 1, 3, 1, 1, 1, 1, 43, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 5, 1, 1, 3, 1, 1, 8, 1, 1, 1, 1, 26, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 38, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 63, 1, 1, 1, 1, 1, 148, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 40, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 3, 1, 1, 1, 13, 1, 1, 1, 7, 1, 1, 5, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 21, 1, 3, 1, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 39, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 203, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 3, 1, 34, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 2, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 9, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 4, 1, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 37, 1, 1, 1, 1, 1, 1, 1, 192, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 14, 1, 3, 1, 1, 28, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 23, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 27, 1, 1, 1, 1, 1, 1, 1, 183, 1, 1, 1, 10, 1, 1, 1, 1, 1, 20, 1, 3, 1, 23, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 19, 1, 1, 1, 20, 1, 1, 1, 1, 28, 1, 1, 76, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 176, 1, 1, 1, 1, 8, 1, 1, 1, 1, 25, 1, 3, 1, 1, 17, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 23, 1, 1, 15, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 90, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 168, 1, 1, 1, 9, 1, 1, 1, 30, 1, 3, 1, 12, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 31, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 2, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 103, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 160, 1, 1, 1, 1, 7, 1, 1, 1, 1, 33, 1, 4, 1, 6, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 1, 52, 1, 1, 2, 1, 1, 16, 1, 1, 2, 1, 1, 135, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 154, 1, 1, 1, 8, 1, 1, 1, 36, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 59, 1, 3, 1, 1, 15, 1, 3, 1, 141, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 146, 1, 1, 1, 1, 7, 1, 1, 1, 40, 1, 1, 3, 1, 1, 13, 1, 1, 1, 1, 65, 1, 4, 1, 1, 13, 1, 1, 3, 1, 146, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 140, 1, 1, 1, 7, 1, 1, 1, 40, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 70, 1, 4, 1, 1, 11, 1, 1, 3, 1, 152, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 134, 1, 1, 1, 7, 1, 1, 1, 37, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 76, 1, 5, 1, 1, 8, 1, 1, 4, 1, 157, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 128, 1, 1, 1, 7, 1, 1, 35, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 80, 1, 1, 5, 1, 8, 1, 4, 1, 163, 1, 1, 1, 1, 1, 10, 1, 1, 1, 124, 1, 1, 1, 6, 1, 1, 1, 32, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 5, 1, 1, 81, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 168, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 119, 1, 1, 1, 6, 1, 1, 1, 30, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 81, 1, 1, 14, 1, 1, 173, 1, 1, 1, 8, 1, 1, 1, 1, 115, 1, 1, 6, 1, 1, 1, 28, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 6, 1, 1, 1, 80, 1, 1, 12, 1, 1, 177, 1, 1, 1, 1, 8, 1, 1, 1, 110, 1, 1, 1, 5, 1, 1, 28, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 14, 1, 1, 6, 1, 1, 80, 1, 1, 1, 8, 1, 1, 1, 181, 1, 1, 1, 8, 1, 1, 1, 106, 1, 1, 6, 1, 1, 1, 25, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 21, 1, 1, 1, 5, 1, 82, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 185, 1, 1, 1, 1, 7, 1, 1, 1, 102, 1, 1, 6, 1, 1, 24, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 27, 1, 1, 1, 2, 1, 1, 281, 1, 1, 1, 6, 1, 100, 1, 1, 1, 5, 1, 1, 1, 21, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 33, 1, 1, 1, 284, 1, 1, 1, 4, 1, 99, 1, 1, 5, 1, 1, 1, 19, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 326, 1, 1, 1, 1, 1, 1, 98, 1, 1, 5, 1, 1, 18, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 333, 1, 1, 97, 1, 1, 1, 4, 1, 1, 1, 15, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 435, 1, 1, 5, 1, 1, 16, 1, 1, 9, 1, 1, 1, 1, 439, 1, 1, 4, 1, 1, 18, 1, 7, 1, 1, 1, 1, 440, 1, 1, 5, 1, 1, 19, 1, 4, 1, 1, 1, 1, 443, 1, 5, 1, 21, 1, 1, 1, 1, 1, 1, 446, 1, 3, 1, 1, 474, 1, 1, 1, 1, 1, 476, 1, 1, 40260, 
    };
    int x = 0, y = 0;
    for(int i = 0; i < sizeof(imageIndices) / sizeof(imageIndices[0]); ++i) {
        int index = imageIndices[i];
        int count = imageCounts[i];
        if(index >= 0) {
            const char* color = imageColors[index];
            Brain.Screen.setPenColor(color);
            for(int j = 0; j < count; ++j) {
                Brain.Screen.drawPixel(x++, y);
                if(x >= 480) { x = 0; y++; }
            }
        } else {
            x += count;
            while(x >= 480) { x -= 480; y++; }
        }
    }
}

//Define auton (Farton)
void FartonLeft(){
  Drivetrain.drive(forward);
  Drivetrain.driveFor(56, inches, 200, rpm);
  Drivetrain.turnFor(left,30, degrees);
  Drivetrain.driveFor(10, inches, 200, rpm);
  MotorIntakeMain.spinFor(forward, 5, sec);
  Drivetrain.stop();
}
void FartonRight(){
  Drivetrain.drive(forward);
  Drivetrain.driveFor(56, inches, 200, rpm);
  Drivetrain.turnFor(right,30, degrees);
  Drivetrain.driveFor(10, inches, 200, rpm);
  MotorIntakeMain.spinFor(forward, 5, sec);
  Drivetrain.stop();
}

// Construct a 3-Wire Expander "Triport1" with the triport class.
triport Triport1 = triport(PORT1);
triport Triport2 = triport(PORT2);

// pneumatic class.
// pneumatics Middle = pneumatics(triport1);
// pneumatics Front = pneumatics(triport2);

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton(void) {

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous(void) {
  // ..........................................................................
  // Insert autonomous user code here.
  // ..........................................................................
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
  // User control code here, inside the loop
  while (1) {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
        // Drivetrain movement
      // get joystick values
    int leftY = 6 * Controller.Axis1.position(); // multiply percent by 6 to get rpm, Controller.AxisNUMBER.position(); returns numbers -100 to 100
    int rightX = 6 * Controller.Axis3.position();
      // move the left side of the robot
    DrivetrainLeft.spin(forward, leftY + rightX, rpm);

      // move the right side of the robot 
    DrivetrainRight.spin(forward, rightX - leftY, rpm);

    // when X pressed, draw cat
    Controller.ButtonX.pressed(cat);

    // when Y pressed, start auton
    Controller.ButtonY.pressed(FartonLeft);

    // bool for both intakes
    bool pressy = Controller.ButtonR1.pressing();
    bool pressylower = Controller.ButtonR2.pressing();
    // set up speed for intake motors
    BothIntakes.setVelocity(200,rpm);
    // if controller button R1 is presse motors spin reversed, if R2 is pressed motors spin out, if else stop
    if (pressy == true){
      BothIntakes.spin(reverse);
    } else if (pressylower == true) {
      BothIntakes.spin(forward);
    } else {
      BothIntakes.stop();
    }

    // variable fo Main intake
    bool Verypressed = Controller.ButtonL1.pressing();
    bool NotVerypressed = Controller.ButtonL2.pressing();
    // set up speed for main intake motor
    MotorIntakeMain.setVelocity(200,rpm);
    // if controller bumper is presse motor go spin
    if (Verypressed == true){
      MotorIntakeMain.spin(reverse);
    } else if (NotVerypressed == true){
      MotorIntakeMain.spin(forward);
    } else {
      MotorIntakeMain.stop();
    }
    
    // ........................................................................

    wait(20, msec); // Sleep the task for a short amount of time to
                    // prevent wasted resources.
  }
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
